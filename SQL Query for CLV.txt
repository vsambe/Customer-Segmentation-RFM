-- calculating for sales
-- NOT eliminating any duplicates
-- using the cohort_week (determined by first time visit) as anchor date to determin weeks in Outer Query


WITH 

cleaned_table AS(
  SELECT
    DATE(TIMESTAMP_MICROS(event_timestamp)) AS event_date, 
    event_name,
    user_pseudo_id,
    purchase_revenue_in_usd
  FROM `tc-da-1.turing_data_analytics.raw_events`
),

--Determining for each Customer the first visit to our website and, based on that date, defining the cohort_week

first_visit_table AS(
  SELECT 
    DISTINCT user_pseudo_id,
    DATE_TRUNC(MIN(DATE(TIMESTAMP_MICROS(event_timestamp))), WEEK) AS cohort_week -- using MIN(event_timestamp) to determin first visit and transforming this date into our cohort_week
  FROM `tc-da-1.turing_data_analytics.raw_events`
  
  GROUP BY 1
),

-- joining first 2 CTEs --
no_dublicates AS (
  SELECT 
    first_visit_table.cohort_week,
    cleaned_table.event_date,
    cleaned_table.event_name,
    cleaned_table.user_pseudo_id,
    cleaned_table.purchase_revenue_in_usd
  FROM cleaned_table
    FULL OUTER JOIN first_visit_table
    ON cleaned_table.user_pseudo_id = first_visit_table.user_pseudo_id
)

--Outer Query --
SELECT 
  cohort_week,
  COUNT (DISTINCT user_pseudo_id) AS New_Registrations,

  SUM(CASE  WHEN event_date >= cohort_week AND event_date < DATE_ADD(cohort_week, INTERVAL 1 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END) 
  AS sales_week0,
 
  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 1 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 2 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END) 
  AS sales_week1,         

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 2 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 3 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)  
  AS sales_week2,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 3 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 4 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week3,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 4 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 5 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week4,
  
  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 5 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 6 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)  
  AS sales_week5,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 6 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 7 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week6,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 7 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 8 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week7,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 8 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 9 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)  
  AS sales_week8,
  
  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 9 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 10 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week9,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 10 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 11 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)  
  AS sales_week10,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 11 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 12 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)  
  AS sales_week11,

  SUM(CASE  WHEN event_date >= DATE_ADD(cohort_week,INTERVAL 12 WEEK) AND event_date < DATE_ADD(cohort_week, INTERVAL 13 WEEK)
            THEN purchase_revenue_in_usd ELSE NULL END)   
  AS sales_week12,

FROM no_dublicates

GROUP BY cohort_week
ORDER BY cohort_week

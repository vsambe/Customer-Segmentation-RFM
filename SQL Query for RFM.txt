-- Query for RFM Analysis --

WITH 

-- Compute for F & M --
t1 AS (
  SELECT 
    CustomerID,
    CAST(MAX(InvoiceDate) AS DATE) AS last_purchase_date,
    COUNT(DISTINCT IF(InvoiceNo NOT LIKE 'C%', InvoiceNo, NULL)) AS frequency, --excluding the counting of return invoices --
    ROUND(SUM(Quantity * UnitPrice),2) AS monetary --here, we are considering return invoices. thus, returned items are deducted --
  
  FROM `tc-da-1.turing_data_analytics.rfm`

  WHERE InvoiceDate BETWEEN '2010-12-01' AND '2011-12-01' -- limiting our analysis to a specific time period --
    AND CustomerID IS NOT NULL --excluding entries with no CustomerID --

  GROUP BY CustomerID

  HAVING SUM(Quantity * UnitPrice) >= 0 -- excluding the 47 cases with more return invoices than actual invoices and therefore having a negative monetary value --
),

-- Compute for R --
t2 AS (
  SELECT *,
  DATE_DIFF('2011-12-01', last_purchase_date, DAY) AS recency
  FROM t1
),

-- Defining Quantiles -- 

t3 AS (
  SELECT
    a.*,
    --All percentiles for MONETARY --
    b.percentiles[offset(25)] AS m25,
    b.percentiles[offset(50)] AS m50, 
    b.percentiles[offset(75)] AS m75,
    b.percentiles[offset(100)] AS m100,
    --All percentiles for FREQUENCY --
    c.percentiles[offset(25)] AS f25,
    c.percentiles[offset(50)] AS f50,
    c.percentiles[offset(75)] AS f75,
    c.percentiles[offset(100)] AS f100,
    --All percentiles for RECENCY
    d.percentiles[offset(25)] AS r25,
    d.percentiles[offset(50)] AS r50,
    d.percentiles[offset(75)] AS r75,
    d.percentiles[offset(100)] AS r100
  FROM
    t2 AS a,
    (SELECT APPROX_QUANTILES(monetary,100) percentiles FROM t2) AS b,
    (SELECT APPROX_QUANTILES(frequency, 100) percentiles FROM t2) AS c,
    (SELECT APPROX_QUANTILES(recency, 100) percentiles FROM t2) AS d
), 

-- Assigning Scores for each RFM metric --
t4 AS(
  SELECT *,
  CAST(ROUND((f_score + m_score) / 2, 0) AS INT64) AS fm_score
  FROM (SELECT *,
        CASE  WHEN monetary <= m25 THEN 1
              WHEN monetary <= m50 AND monetary > m25 THEN 2
              WHEN monetary <= m75 AND monetary > m50 THEN 3
              WHEN monetary <= m100 AND monetary > m75 THEN 4
        END AS m_score,
        CASE  WHEN frequency <= f25 THEN 1
              WHEN frequency <= f50 AND frequency > f25 THEN 2
              WHEN frequency <= f75 AND frequency > f50 THEN 3
              WHEN frequency <= f100 AND frequency > f75 THEN 4
        END AS f_score,
        --Recency scoring is reversed --
        CASE  WHEN recency <= r25 THEN 4
              WHEN recency <= r50 AND recency > r25 THEN 3
              WHEN recency <= r75 AND recency > r50 THEN 2
              WHEN recency <= r100 AND recency > r75 THEN 1
        END AS r_score,

        FROM t3
        )
), 

-- Segmenting Customers into categories --
t5 AS (
  SELECT
    CustomerID,
    recency,
    frequency,
    monetary,
    r_score,
    f_score,
    m_score,
    fm_score,
    CASE  WHEN (r_score = 4 AND fm_score = 4)
          THEN 'Best Customers'

          WHEN (r_score = 4 AND fm_score = 3)
            OR (r_score = 3 AND fm_score = 3)
            OR (r_score = 2 AND fm_score = 3)
          THEN 'Loyal Customers'

          WHEN (r_score = 3 AND fm_score = 4)
            OR (r_score = 2 AND fm_score = 4)
          THEN 'Big Spenders'

          WHEN (r_score = 1 AND fm_score = 1)
            OR (r_score = 1 AND fm_score = 2)
            OR (r_score = 1 AND fm_score = 3)
            OR (r_score = 1 AND fm_score = 4)
          THEN 'Lost Customers'

          WHEN (r_score = 4 AND fm_score = 1)
            OR (r_score = 3 AND fm_score = 1)
            OR (r_score = 2 AND fm_score = 1)
            OR (r_score = 4 AND fm_score = 2)
            OR (r_score = 3 AND fm_score = 2)
            OR (r_score = 2 AND fm_score = 2)
          THEN 'Low Spenders'

          END AS rfm_segment

    FROM t4
)

SELECT *
FROM t5